{
    "swagger": "2.0",
    "info": {
        "version": "1.0.5",
        "title": "Jounaling app documentation"
    },
    "host": "localhost:5000",
    "basePath": "/",
    "tags": [
        {
            "name": "users",
            "description": "Everything about user"
        },
        {
            "name": "Diaries",
            "description": "Everything about diary "
        },
        {
            "name": "Goals",
            "description": "Everything about goals"
        },
        {
            "name": "tasks",
            "description": "Everything about tasks"
        },
        {
            "name": "Notes",
            "description": "Everything about notes"
        },
        {
            "name": "moods",
            "description": "Everything about moods"
        },
        {
            "name": "events",
            "description": "Everything about events"
        }

    ],
    "schemes": [
        "http"
    ],
    "paths": {
        "/api/users": {
            "mood": {
                "tags": [
                    "User"
                ],
                "summary": "Save new user",
                "description": "Save new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                    "in": "body",
                    "name": "body",
                    "description": "User object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }
            ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "update existing user",
                "description": "update existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "User object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "User"
                ],
                "security":[
                    {
                        "Bearer": []
                    }
                ],
                "summary": "Finds all Users",
                "description": "All Users available in the system",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "404": {
                        "description": "No record found"
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Find note by ID",
                "description": "Returns a single user",
                "operationId": "getUserById",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "ID of user to return",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "user not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "User account Deletion",
                "description": "Returns a deleted user",
                "operationId": "deleteUserById",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "ID of user to delete",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "user not found"
                    }
                }
            }
        },
        "/api/notes": {
            "note": {
                "tags": [
                    "note"
                ],
                "summary": "Save new note",
                "description": "Save new note",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                    "in": "body",
                    "name": "body",
                    "description": "note object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/note"
                    }
                }
            ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "note"
                ],
                "summary": "update existing note",
                "description": "update existing note",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "note object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/note"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "note"
                ],
                "security":[
                    {
                        "Bearer": []
                    }
                ],
                "summary": "Finds all notes",
                "description": "All notes available in the system",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/note"
                            }
                        }
                    },
                    "404": {
                        "description": "No record found"
                    }
                }
            }
        },
        "/api/notes/{id}": {
            "get": {
                "tags": [
                    "note"
                ],
                "summary": "Find note by ID",
                "description": "Returns a single note",
                "operationId": "getnoteById",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "ID of note to return",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/note"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "note not found"
                    }
                }
            },
            
            "delete": {
                "tags": [
                    "note"
                ],
                "summary": "note Deletion",
                "description": "Returns a deleted note",
                "operationId": "deletenoteById",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "ID of note to delete",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/note"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "note not found"
                    }
                }
            }
        },

       
"/api/events": {
    "event": {
        "tags": [
            "event"
        ],
        "summary": "Save new event",
        "description": "Save new event",
        "consumes": [
            "application/json"
        ],
        "produces": [
            "application/json"
        ],
        "parameters": [
            {
            "in": "body",
            "name": "body",
            "description": "event object that needs to be added to the database",
            "required": true,
            "schema": {
                "$ref": "#/definitions/event"
            }
        }
    ],
        "responses": {
            "201": {
                "description": "successful operation",
                "schema": {
                    "$ref": "#/definitions/ApiResponse"
                }
            }
        }
    },
    "put": {
        "tags": [
            "event"
        ],
        "summary": "update existing event",
        "description": "update existing event",
        "consumes": [
            "application/json"
        ],
        "produces": [
            "application/json"
        ],
        "parameters": [{
            "in": "body",
            "name": "body",
            "description": "event object that needs to be added to the database",
            "required": true,
            "schema": {
                "$ref": "#/definitions/event"
            }
        }],
        "responses": {
            "201": {
                "description": "successful operation",
                "schema": {
                    "$ref": "#/definitions/ApiResponse"
                }
            }
        }
    },
    "get": {
        "tags": [
            "event"
        ],
        "security":[
            {
                "Bearer": []
            }
        ],
        "summary": "Finds all events",
        "description": "All events available in the system",
        "produces": [
            "application/json"
        ],
        "responses": {
            "200": {
                "description": "successful operation",
                "schema": {
                    "type": "object",
                    "items": {
                        "$ref": "#/definitions/goal"
                    }
                }
            },
            "404": {
                "description": "No record found"
            }
        }
    }
},
"/api/events/{id}": {
    "delete": {
        "tags": [
            "event"
        ],
        "summary": "event Deletion",
        "description": "Returns a deleted event",
        "operationId": "deletegoalById",
        "produces": [
            "application/json"
        ],
        "parameters": [{
            "name": "id",
            "in": "path",
            "description": "ID of event to delete",
            "required": true,
            "type": "string"
        }],
        "responses": {
            "200": {
                "description": "successful operation",
                "schema": {
                    "$ref": "#/definitions/event"
                }
            },
            "400": {
                "description": "Invalid ID supplied"
            },
            "404": {
                "description": "event not found"
            }
        }
    }
},


"/api/binItems": {
    "binItem": {
        "tags": [
            "binItem"
        ],
        "summary": "Save new binItem",
        "description": "Save new binItem",
        "consumes": [
            "application/json"
        ],
        "produces": [
            "application/json"
        ],
        "parameters": [
            {
            "in": "body",
            "name": "body",
            "description": "binItem object that needs to be added to the database",
            "required": true,
            "schema": {
                "$ref": "#/definitions/binItem"
            }
        }
    ],
        "responses": {
            "201": {
                "description": "successful operation",
                "schema": {
                    "$ref": "#/definitions/ApiResponse"
                }
            }
        }
    },
    "put": {
        "tags": [
            "binItem"
        ],
        "summary": "update existing binItem",
        "description": "update existing binItem",
        "consumes": [
            "application/json"
        ],
        "produces": [
            "application/json"
        ],
        "parameters": [{
            "in": "body",
            "name": "body",
            "description": "binItem object that needs to be added to the database",
            "required": true,
            "schema": {
                "$ref": "#/definitions/binItem"
            }
        }],
        "responses": {
            "201": {
                "description": "successful operation",
                "schema": {
                    "$ref": "#/definitions/ApiResponse"
                }
            }
        }
    },
    "get": {
        "tags": [
            "binItem"
        ],
        "security":[
            {
                "Bearer": []
            }
        ],
        "summary": "Finds all binItems",
        "description": "All binItems available in the system",
        "produces": [
            "application/json"
        ],
        "responses": {
            "200": {
                "description": "successful operation",
                "schema": {
                    "type": "object",
                    "items": {
                        "$ref": "#/definitions/goal"
                    }
                }
            },
            "404": {
                "description": "No record found"
            }
        }
    }
},
"/api/binItems/{id}": {
    "delete": {
        "tags": [
            "binItem"
        ],
        "summary": "binItem Deletion",
        "description": "Returns a deleted binItem",
        "operationId": "deletegoalById",
        "produces": [
            "application/json"
        ],
        "parameters": [{
            "name": "id",
            "in": "path",
            "description": "ID of binItem to delete",
            "required": true,
            "type": "string"
        }],
        "responses": {
            "200": {
                "description": "successful operation",
                "schema": {
                    "$ref": "#/definitions/binItem"
                }
            },
            "400": {
                "description": "Invalid ID supplied"
            },
            "404": {
                "description": "binItem not found"
            }
        }
    }
},


        "/api/tasks": {
            "task": {
                "tags": [
                    "task"
                ],
                "summary": "Save new task",
                "description": "Save new task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                    "in": "body",
                    "name": "body",
                    "description": "task object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/task"
                    }
                }
            ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "task"
                ],
                "summary": "update existing task",
                "description": "update existing task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "task object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/task"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "task"
                ],
                "security":[
                    {
                        "Bearer": []
                    }
                ],
                "summary": "Finds all tasks",
                "description": "All tasks available in the system",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/goal"
                            }
                        }
                    },
                    "404": {
                        "description": "No record found"
                    }
                }
            }
        },
        "/api/tasks/{id}": {
            "delete": {
                "tags": [
                    "task"
                ],
                "summary": "task Deletion",
                "description": "Returns a deleted task",
                "operationId": "deletegoalById",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "ID of task to delete",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "task not found"
                    }
                }
            }
        },


        "/api/goals": {
            "goals": {
                "tags": [
                    "goal"
                ],
                "summary": "Save new goal",
                "description": "Save new goal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                    "in": "body",
                    "name": "body",
                    "description": "goal object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/goal"
                    }
                }
            ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "goal"
                ],
                "summary": "update existing goal",
                "description": "update existing goal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "goal object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/goal"
                    }
                }],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "goal"
                ],
                "security":[
                    {
                        "Bearer": []
                    }
                ],
                "summary": "Finds all goals",
                "description": "All goals available in the system",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/goal"
                            }
                        }
                    },
                    "404": {
                        "description": "No record found"
                    }
                }
            }
        },
        "/api/goals/{id}": {
            "delete": {
                "tags": [
                    "goal"
                ],
                "summary": "goal Deletion",
                "description": "Returns a deleted goal",
                "operationId": "deletegoalById",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "ID of goal to delete",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/goal"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "goal not found"
                    }
                }
            }
        },

        "/api/moods": {
            "mood": {
                "tags": [
                    "mood"
                ],
                "summary": "Save new mood",
                "description": "Save new mood",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                    "in": "body",
                    "name": "body",
                    "description": "mood object that needs to be added to the database",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/mood"
                    }
                }
            ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "mood"
                ],
                "security":[
                    {
                        "Bearer": []
                    }
                ],
                "summary": "Finds all moods",
                "description": "All moods available in the system",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "items": {
                                "$ref": "#/definitions/mood"
                            }
                        }
                    },
                    "404": {
                        "description": "No record found"
                    }
                }
            }
        },
        "/api/moods/{id}": {
            "get": {
                "tags": [
                    "mood"
                ],
                "summary": "Find mood by ID",
                "description": "Returns a single mood",
                "operationId": "getmoodById",
                "produces": [
                    "application/json"
                ],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "description": "ID of mood to return",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/mood"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "mood not found"
                    }
                }
            }
        }
    },
        "definitions": {
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                }
            },
            "Token": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string"
                    }
                }
            },
        "note": {
            "type": "object",
            "required": [
                "noteName",
                "noteTag",
                "writtenBy",
                "stringOfPublishing"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "noteName": {
                    "type": "string",
                    "example": "Rich Dad Poor Dad"
                },
                "noteTag": {
                    "type": "string",
                    "example": "rich dad"
                },
                "noteRating": {
                    "type": "string",
                    "example": "5 starts"
                },
                "currentReaders":{
                    "type": "object",
                    "example": "['Jane Doe','John Doe']"
                },
                "AlreadyRead":{
                    "type": "object",
                    "example": "['Peter Doe','Lorem Dan']"

                },
                "writtenBy": {
                    "type": "string",
                    "example": "James Black"
                },
                "noteStatus": {
                    "type": "string",
                    "example": "Paid"
                },
                "stringOfPublishing": {
                    "type": "string",
                    "example": "10/2/2022"
                },
                "Recentlyupdatedstring":{
                    "type": "string",
                    "example": "10/2/2022"
                },
                "noteChapters": {
                    "type": "object",
                    "example": "['chapter 1','chapter 2']"
                },
                "noteCover":{
                    "type": "string",
                    "example": "image.jpg"
                }
            }
        },
        "User": {
            "type": "object",
            "required": [
                "userName",
                "Email",
                "password",
                "DOB"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "Email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "DOB": {
                    "type": "string"
                },
                "followers": {
                    "type": "object"
                },
                "rating": {
                    "type": "string"
                },
                "notesWritten": {
                    "type": "object"
                },
                "preferences": {
                    "type": "string"
                },
                "Profilepicture": {
                    "type": "string"
                }
            }
        },
        "mood": {
            "type": "object",
            "required": [
                "moodContent",
                "moodedBy"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "moodContent": {
                    "type": "string"
                },
                "moodImage": {
                    "type": "string"
                },
                "moodedBy": {
                    "type": "string"
                },
                "comments": {
                    "type": "object"
                }
            }
        },
        "goal": {
            "type": "object",
            "required": [
                "goalName",
                "goalDescription",
                "heldBy",
                "goalStatus"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "goalName": {
                    "type": "string"
                },
                "goalDescription": {
                    "type": "string"
                },
                "heldBy": {
                    "type": "string"
                },
                "goalStatus": {
                    "type": "string"
                }
            }
        },
        "Login": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }   
}
